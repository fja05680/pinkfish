---
description: |
    API documentation for modules: pinkfish, pinkfish.analysis, pinkfish.benchmark, pinkfish.fetch, pinkfish.indicator, pinkfish.itable, pinkfish.pfcalendar, pinkfish.pfstatistics, pinkfish.plot, pinkfish.portfolio, pinkfish.stock_market_calendar, pinkfish.trade, pinkfish.utility.

lang: en

classoption: oneside
geometry: margin=1in
papersize: a4

linkcolor: blue
links-as-notes: true
...


    
# Module `pinkfish` {#id}




    
## Sub-modules

* [pinkfish.analysis](#pinkfish.analysis)
* [pinkfish.benchmark](#pinkfish.benchmark)
* [pinkfish.fetch](#pinkfish.fetch)
* [pinkfish.indicator](#pinkfish.indicator)
* [pinkfish.itable](#pinkfish.itable)
* [pinkfish.pfcalendar](#pinkfish.pfcalendar)
* [pinkfish.pfstatistics](#pinkfish.pfstatistics)
* [pinkfish.plot](#pinkfish.plot)
* [pinkfish.portfolio](#pinkfish.portfolio)
* [pinkfish.stock_market_calendar](#pinkfish.stock_market_calendar)
* [pinkfish.trade](#pinkfish.trade)
* [pinkfish.utility](#pinkfish.utility)


    
## Variables


    
### Variable `DEBUG` {#id}




bool : True to enable DBG() output.


    
## Functions


    
### Function `DBG` {#id}




>     def DBG(
>         s
>     )


Debug print.  Enable by setting pf.DEBUG=True.




    
# Module `pinkfish.analysis` {#id}

Analysis of results.

This module contains some functions that were copied or derived
from the book "Trading Evolved" by Andreas F. Clenow.
Below is a correspondance I had with the author:

------------------------------------------------------------------------
Farrell
October 25, 2019 at 15:49
Hi Andreas,

I just finished reading the book. Awesome one of a kind! Thanks so much.
I also enjoyed your other two. Question: what is the copyright (if any)
on the source code you have in the book. I want to incorporate some of
it into my open source backtester, Pinkfish. How should I credit your
work if no copyright.  I could add a comment at the beginning of each
derived function or module at a minimum.

## Farrell


Andreas Clenow
October 25, 2019 at 17:29
Hi Farrell,

I can be paid in reviews and/or beer. :)

For an open source project, use the code as you see fit. A credit in the
comments somewhere would be nice, but I won't sue you if you forget it.

ac
------------------------------------------------------------------------




    
## Functions


    
### Function `holding_period_map` {#id}




>     def holding_period_map(
>         dbal
>     )


Display holding period returns in a table.

This shows what your annualized return would have been, had you
started this strategy at the start of a given year, as shown in
the leftmost column, and held it for a certain number of years.
Length of returns should be 30 or less, otherwise the output
will be jumbled.

###### Parameters

**```dbal```** :&ensp;<code>pd.Series</code>
:   The daily closing balance indexed by date.

###### Returns

<code>None</code>
:   &nbsp;

###### Examples

```python-repl
>>> table = holding_period_map(dbal['close'])
>>> display(HTML(table))
Years    1   2   3   4   5   6   7   8
2013    30  20  13  12  13  10  12  12
2014    11   5   7  10   6  10   9
...
2020     8
```


    
### Function `kelly_criterion` {#id}




>     def kelly_criterion(
>         stats,
>         benchmark_stats=None
>     )


Use this function to help with sizing of leverage.

This function uses ideas based on the Kelly Criterion.

###### Parameters

**```stats```** :&ensp;<code>pd.Series</code>
:   Statistics for the strategy.


**```bbenchmark_stats```** :&ensp;<code>pd.Series, optimal</code>
:   Statistics for the benchmark (default is None, which implies
    that a benchmark is not being used).

###### Returns

**```s```** :&ensp;<code>pf.Series</code>
:   Leverage statistics.

     - <code>sharpe\_ratio</code> is a measure of risk adjusted return.

     - <code>sharpe\_ratio\_max</code> is the maximum expected sharpe ratio.

     - <code>sharpe\_ratio\_min</code> is the minimum expected sharpe ratio.

     - <code>strategy risk</code> is a measure of how risky a trading strategy
        is, calculated as an annual standard deviation of returns.

     - <code>instrument\_risk</code> is a measure of how risky an instrument is
        before any leverage is applied, calculated as an annual
        standard deviation of returns.

     - <code>optimal target risk</code> is equal to the expected sharpe ratio,
        according to the Kelly criterion.  Target risk is the amount
        of risk you expect to see when trading, calculated as an
        annual standard deviation of returns.

     - <code>half kelly criterion</code> is equal to half the expected
        sharpe ratio.  It uses a conservative version of the
        Kelly criterion known as half Kelly.

     - <code>aggressive leverage</code> is the optimal target risk divided by
        the instrument risk.  This is an aggressive form of the
        leverage factor, which is the cash value of a position
        divided by your capital.

     - <code>moderate leverage</code> is the leverage factor calculated using
        half Kelly.

     - <code>conservative leverage</code> is the leverage factor calculated
        using half of the minimum sharpe ratio divided by 2.



    
### Function `monthly_returns_map` {#id}




>     def monthly_returns_map(
>         dbal
>     )


Display per month and per year returns in a table.

###### Parameters

**```dbal```** :&ensp;<code>pd.Series</code>
:   The daily closing balance indexed by date.

###### Returns

<code>None</code>
:   &nbsp;

###### Examples

```python-repl
>>> monthly_returns_map(dbal['close'])
Year    Jan     Feb     Mar     Apr     May     Jun     Jul ... Year
1990   -8.5     0.9     2.4    -2.7     9.2    -0.9    -0.5    -8.2
1991    4.2     6.7     2.2     0.0     3.9    -4.8     4.5    26.3
```


    
### Function `prettier_graphs` {#id}




>     def prettier_graphs(
>         dbal,
>         benchmark_dbal,
>         dbal_label='Strategy',
>         benchmark_label='Benchmark',
>         points_to_plot=None
>     )


Plot 3 subplots.

The first subplot will show a rebased comparison of the returns to
the benchmark returns, recalculated with the same starting value
of 1.  This will be shown on a semi logarithmic scale.  The second
subplot will show relative strength of the returns to the benchmark
returns, and the third the correlation between the two.

###### Parameters

**```dbal```** :&ensp;<code>pd.Series</code>
:   Strategy daily closing balance indexed by date.


**```benchmark_dbal```** :&ensp;<code>pd.Series</code>
:   Benchmark daily closing balance indexed by date.


**```label```** :&ensp;<code>str</code>, optional
:   Label to use in graph for strategy (default is 'Strategy').


**```benchmark_label```** :&ensp;<code>str</code>, optional
:   Label to use in graph for benchmark (default is 'Benchmark').


**```points_to_plot```** :&ensp;<code>int</code>, optional
:   Define how many points (trading days) we intend to plot
    (default is None, which implies plot all points or days).

###### Returns

<code>None</code>
:   &nbsp;

###### Examples

```python-repl
>>> prettier_graphs(dbal['close'], benchmark_dbal['close'],
                    points_to_plot=5000)
```


    
### Function `volatility_graphs` {#id}




>     def volatility_graphs(
>         dbals,
>         labels,
>         points_to_plot=None
>     )


Plot volatility graphs.

The first graph is a boxplot showing the differences between
2 or more returns.  The second graph shows the volatility plotted
for 2 or more returns.

###### Parameters

**```dbals```** :&ensp;<code>list</code> of <code>pd.DataFrame</code>
:   A list of daily closing balances (or daily instrument closing
    prices) indexed by date.


**```labels```** :&ensp;<code>list</code> of <code>str</code>
:   A list of labels.


**```points_to_plot```** :&ensp;<code>int</code>, optional
:   Define how many points (trading days) we intend to plot
    (default is None, which implies plot all points or days).

###### Returns

<code>pf.DataFrame</code>
:   Statistics comparing the <code>dbals</code>.

###### Examples

```python-repl
>>> df = pf.volatility_graph([ts, dbal], ['SPY', 'Strategy'],
                             points_to_plot=5000)
>>> df
```





    
# Module `pinkfish.benchmark` {#id}

Benchmark for comparision to a strategy.





    
## Classes


    
### Class `Benchmark` {#id}




>     class Benchmark(
>         symbols,
>         capital,
>         start,
>         end,
>         dir_name='data',
>         use_adj=False,
>         use_continuous_calendar=False,
>         force_stock_market_calendar=False
>     )


Portfolio Benchmark for comparison to a strategy.

Initialize instance variables.

#### Parameters

**```symbols```** :&ensp;<code>str</code> or <code>list</code> of <code>str</code>
:   The symbol(s) to use in the benchmark.


**```capital```** :&ensp;<code>int</code>
:   The amount of money available for trading.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The desired start date for the benchmark.


**```end```** :&ensp;<code>datetime.datetime</code>
:   The desired end date for the benchmark.


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').


**```use_adj```** :&ensp;<code>bool</code>, optional
:   True to adjust prices for dividends and splits
    (default is False).


**```use_continuous_calendar```** :&ensp;<code>bool</code>, optional
:   True if your timeseries has data for all seven days a week,
    and you want to backtest trading every day, including weekends.
    If this value is True, then <code>force\_stock\_market\_calendar</code>
    is set to False (default is False).


**```force_stock_market_calendar```** :&ensp;<code>bool</code>, optional
:   True forces use of stock market calendar on timeseries.
    Normally, you don't need to do this.  This setting is intended
    to transform a continuous timeseries into a weekday timeseries.
    If this value is True, then <code>use\_continuous\_calendar</code> is set
    to False.

#### Attributes

**```symbols```** :&ensp;<code>list</code> of <code>str</code>
:   The symbols to use in the benchmark.


**```capital```** :&ensp;<code>int</code>
:   The amount of money available for trading.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The desired start date for the benchmark.


**```end```** :&ensp;<code>datetime.datetime</code>
:   The desired end date for the benchmark.


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').


**```use_adj```** :&ensp;<code>bool</code>, optional
:   True to adjust prices for dividends and splits.


**```use_continuous_calendar```** :&ensp;<code>bool</code>, optional
:   True if your timeseries has data for all seven days a week,
    and you want to backtest trading every day, including weekends.
    If this value is True, then <code>force\_stock\_market\_calendar</code>
    is set to False (default is False).


**```force_stock_market_calendar```** :&ensp;<code>bool</code>, optional
:   True forces use of stock market calendar on timeseries.
    Normally, you don't need to do this.  This setting is intended
    to transform a continuous timeseries into a weekday timeseries.
    If this value is True, then <code>use\_continuous\_calendar</code> is set
    to False.


**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of the symbol used in backtest.


**```rlog```** :&ensp;<code>pd.DataFrame</code>
:   The raw trade log.


**```tlog```** :&ensp;<code>pd.DataFrame</code>
:   The trade log.


**```dbal```** :&ensp;<code>pd.DataFrame</code>
:   The daily balance.


**```stats```** :&ensp;<code>pd.Series</code>
:   The statistics for the benchmark.


**```portfolio```** :&ensp;<code>pf.Portfolio</code>
:   The portfolio.









    
#### Methods


    
##### Method `run` {#id}




>     def run(
>         self
>     )


Run the strategy.

    
### Class `Strategy` {#id}




>     class Strategy(
>         symbols,
>         capital,
>         start,
>         end,
>         dir_name='data',
>         use_adj=False,
>         use_continuous_calendar=False,
>         force_stock_market_calendar=False
>     )


Portfolio Benchmark for comparison to a strategy.

Initialize instance variables.

#### Parameters

**```symbols```** :&ensp;<code>str</code> or <code>list</code> of <code>str</code>
:   The symbol(s) to use in the benchmark.


**```capital```** :&ensp;<code>int</code>
:   The amount of money available for trading.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The desired start date for the benchmark.


**```end```** :&ensp;<code>datetime.datetime</code>
:   The desired end date for the benchmark.


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').


**```use_adj```** :&ensp;<code>bool</code>, optional
:   True to adjust prices for dividends and splits
    (default is False).


**```use_continuous_calendar```** :&ensp;<code>bool</code>, optional
:   True if your timeseries has data for all seven days a week,
    and you want to backtest trading every day, including weekends.
    If this value is True, then <code>force\_stock\_market\_calendar</code>
    is set to False (default is False).


**```force_stock_market_calendar```** :&ensp;<code>bool</code>, optional
:   True forces use of stock market calendar on timeseries.
    Normally, you don't need to do this.  This setting is intended
    to transform a continuous timeseries into a weekday timeseries.
    If this value is True, then <code>use\_continuous\_calendar</code> is set
    to False.

#### Attributes

**```symbols```** :&ensp;<code>list</code> of <code>str</code>
:   The symbols to use in the benchmark.


**```capital```** :&ensp;<code>int</code>
:   The amount of money available for trading.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The desired start date for the benchmark.


**```end```** :&ensp;<code>datetime.datetime</code>
:   The desired end date for the benchmark.


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').


**```use_adj```** :&ensp;<code>bool</code>, optional
:   True to adjust prices for dividends and splits.


**```use_continuous_calendar```** :&ensp;<code>bool</code>, optional
:   True if your timeseries has data for all seven days a week,
    and you want to backtest trading every day, including weekends.
    If this value is True, then <code>force\_stock\_market\_calendar</code>
    is set to False (default is False).


**```force_stock_market_calendar```** :&ensp;<code>bool</code>, optional
:   True forces use of stock market calendar on timeseries.
    Normally, you don't need to do this.  This setting is intended
    to transform a continuous timeseries into a weekday timeseries.
    If this value is True, then <code>use\_continuous\_calendar</code> is set
    to False.


**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of the symbol used in backtest.


**```rlog```** :&ensp;<code>pd.DataFrame</code>
:   The raw trade log.


**```tlog```** :&ensp;<code>pd.DataFrame</code>
:   The trade log.


**```dbal```** :&ensp;<code>pd.DataFrame</code>
:   The daily balance.


**```stats```** :&ensp;<code>pd.Series</code>
:   The statistics for the benchmark.


**```portfolio```** :&ensp;<code>pf.Portfolio</code>
:   The portfolio.









    
#### Methods


    
##### Method `run` {#id}




>     def run(
>         self
>     )


Run the strategy.



    
# Module `pinkfish.fetch` {#id}

Fetch time series data.




    
## Functions


    
### Function `fetch_timeseries` {#id}




>     def fetch_timeseries(
>         symbol,
>         dir_name='data',
>         use_cache=True,
>         from_year=None
>     )


Read time series data.

Use cached version if it exists and use_cache is True, otherwise
retrive, cache, then read.

###### Parameters

**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').


**```use_cache```** :&ensp;<code>bool</code>, optional
:   True to use data cache.  False to retrieve from the internet 
    (default is True).


**```from_year```** :&ensp;<code>int</code>, optional
:   The start year for timeseries retrieval (default is None,
    which implies that all the available data is retrieved).

###### Returns

<code>pd.DataFrame</code>
:   The timeseries of a symbol.



    
### Function `finalize_timeseries` {#id}




>     def finalize_timeseries(
>         ts,
>         start,
>         dropna=False,
>         drop_columns=None
>     )


Finalize timeseries.

Drop all rows that have nan column values.  Set timeseries to begin
at start.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of a symbol.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The start date for backtest.


**```dropna```** :&ensp;<code>bool</code>, optional
:   Drop rows that have a NaN value in one of it's columns
    (default is False).


**```drop_columns```** :&ensp;<code>list</code> of <code>str</code>, optional
:   List of columns to drop from <code>ts</code> (default is None, which
    implies that no columns should be dropped).

###### Returns

<code>datetime.datetime</code>
:   The start date.


<code>pd.DataFrame</code>
:   The timeseries of a symbol.



    
### Function `get_symbol_metadata` {#id}




>     def get_symbol_metadata(
>         symbols=None,
>         dir_name='data',
>         from_year=None
>     )


Get symbol metadata for list of symbols.

Filter out any filename prefixed with '__'.

###### Parameters

**```symbols```** :&ensp;<code>str</code> or <code>list</code>, optional
:   The symbol(s) for which to get symbol metadata (default
    is None, which imples get symbol metadata for all symbols).


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data).


**```from_year```** :&ensp;<code>int</code>, optional
:   The start year for timeseries retrieval (default is None,
    which implies that all the available data is retrieved).

###### Returns

<code>pd.DataFrame</code>
:   Each row contains metadata for a symbol.



    
### Function `remove_cache_symbols` {#id}




>     def remove_cache_symbols(
>         symbols=None,
>         dir_name='data'
>     )


Remove cached timeseries for list of symbols.

Filter out any symbols prefixed with '__'.

###### Parameters

**```symbols```** :&ensp;<code>str</code> or <code>list</code> of <code>str</code>, optional
:   The symbol(s) for which to remove cached timeseries (default
    is None, which imples remove timeseries for all symbols).


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').

###### Returns

<code>None</code>
:   &nbsp;



    
### Function `select_tradeperiod` {#id}




>     def select_tradeperiod(
>         ts,
>         start,
>         end,
>         use_adj=False,
>         use_continuous_calendar=False,
>         force_stock_market_calendar=False,
>         check_fields=['close']
>     )


Select the trade period.

First, remove rows that have zero values in price columns. Then,
select a time slice of the data to trade from ts.  Back date a year
to allow time for long term indicators, e.g. 200sma is become valid.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of a symbol.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The desired start date for the strategy.


**```end```** :&ensp;<code>datetime.datetime</code>
:   The desired end date for the strategy.


**```use_adj```** :&ensp;<code>bool</code>, optional
:   True to adjust prices for dividends and splits
    (default is False).


**```use_continuous_calendar```** :&ensp;<code>bool</code>, optional
:   True if your timeseries has data for all seven days a week,
    and you want to backtest trading every day, including weekends.
    If this value is True, then <code>force\_stock\_market\_calendar</code>
    is set to False (default is False).


**```force_stock_market_calendar```** :&ensp;<code>bool</code>, optional
:   True forces use of stock market calendar on timeseries.
    Normally, you don't need to do this.  This setting is intended
    to transform a continuous timeseries into a weekday timeseries.
    If this value is True, then <code>use\_continuous\_calendar</code> is set
    to False (default is False).


**```check_fields```** :&ensp;<code>list</code> of <code>str</code>, optional `{'high', 'low', 'open',`
:   'close', 'adj_close'}
    Fields to check for for NaN values.  If a NaN value is found
    for one of these fields, that row is dropped
    (default is ['close']).

###### Returns

<code>pd.DataFrame</code>
:   The timeseries for specified start:end, optionally with prices
    adjusted.

###### Notes

You should only set one of <code>use\_continuous\_calendar</code>=True or
<code>force\_stock\_market\_calendar</code>=True for a continuous timeseries.
You should set neither of these to True if your timeseries is based
on the stock market.

    
### Function `update_cache_symbols` {#id}




>     def update_cache_symbols(
>         symbols=None,
>         dir_name='data',
>         from_year=None
>     )


Update cached timeseries for list of symbols.

Filter out any filename prefixed with '__'.

###### Parameters

**```symbols```** :&ensp;<code>str</code> or <code>list</code>, optional
:   The symbol(s) for which to update cached timeseries (default
    is None, which imples update timeseries for all symbols).


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data).


**```from_year```** :&ensp;<code>int</code>, optional
:   The start year for timeseries retrieval (default is None,
    which implies that all the available data is retrieved).

###### Returns

<code>None</code>
:   &nbsp;






    
# Module `pinkfish.indicator` {#id}

Custom indicators.

These indicators are meant to supplement the TA-Lib.  See:
<https://ta-lib.org/function.html>




    
## Functions


    
### Function `ANNUALIZED_RETURNS` {#id}




>     def ANNUALIZED_RETURNS(
>         ts,
>         lookback=5,
>         price='close',
>         prevday=False
>     )


Calculate the rolling annualized returns.

###### Parameters

**```ts```** :&ensp;<code>pd.DateFrame</code>
:   A dataframe with 'open', 'high', 'low', 'close', 'volume'.


**```lookback```** :&ensp;<code>float</code>, optional
:   The number of years to lookback, e.g. 5 years.  1/12 can be
    used for 1 month.  Likewise 3/12 for 3 months, etc...
    (default is 5).


**```price```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   Input_array column to use for price (default is 'close').


**```prevday```** :&ensp;<code>bool</code>, optional
:   True will shift the series forward.  Unless you are buying
    on the close, you'll likely want to set this to True.
    It gives you the previous day's Volatility (default is False).

###### Returns

**```s```** :&ensp;<code>pd.Series</code>
:   Series that contains the rolling annualized returns.

###### Raises

<code>ValueError</code>
:   If the lookback is not positive.

###### Examples

```python-repl
>>> annual_returns_1mo = pf.ANNUALIZED_RETURNS(ts, lookback=1/12)
>>> annual_returns_3mo = pf.ANNUALIZED_RETURNS(ts, lookback=3/12)
>>> annual_returns_1yr = pf.ANNUALIZED_RETURNS(ts, lookback=1)
>>> annual_returns_3yr = pf.ANNUALIZED_RETURNS(ts, lookback=3)
>>> annual_returns_5yr = pf.ANNUALIZED_RETURNS(ts, lookback=5)
```


    
### Function `ANNUALIZED_SHARPE_RATIO` {#id}




>     def ANNUALIZED_SHARPE_RATIO(
>         ts,
>         lookback=5,
>         price='close',
>         prevday=False,
>         risk_free=0
>     )


Calculate the rolling annualized sharpe ratio.

###### Parameters

**```ts```** :&ensp;<code>pd.DateFrame</code>
:   A dataframe with 'open', 'high', 'low', 'close', 'volume'.


**```lookback```** :&ensp;<code>float</code>, optional
:   The number of years to lookback, e.g. 5 years.  1/12 can be
    used for 1 month.  Likewise 3/12 for 3 months, etc...
    (default is 5).


**```price```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   Input_array column to use for price (default is 'close').


**```prevday```** :&ensp;<code>bool</code>, optional
:   True will shift the series forward.  Unless you are buying
    on the close, you'll likely want to set this to True.
    It gives you the previous day's Volatility (default is False).


**```risk_free```** :&ensp;<code>float</code>, optional
:   The risk free rate (default is 0).

###### Returns

**```s```** :&ensp;<code>pd.Series</code>
:   Series that contains the rolling annualized sharpe ratio.

###### Raises

<code>ValueError</code>
:   If the lookback is not positive.

###### Examples

```python-repl
>>> sharpe_ratio_1mo = pf.ANNUALIZED_SHARPE_RATIO(ts, lookback=1/12)
>>> sharpe_ratio_3mo = pf.ANNUALIZED_SHARPE_RATIO(ts, lookback=3/12)
>>> sharpe_ratio_1yr = pf.ANNUALIZED_SHARPE_RATIO(ts, lookback=1)
>>> sharpe_ratio_3yr = pf.ANNUALIZED_SHARPE_RATIO(ts, lookback=3)
>>> sharpe_ratio_5yr = pf.ANNUALIZED_SHARPE_RATIO(ts, lookback=5)
```


    
### Function `ANNUALIZED_STANDARD_DEVIATION` {#id}




>     def ANNUALIZED_STANDARD_DEVIATION(
>         ts,
>         lookback=3,
>         price='close',
>         prevday=False
>     )


Calculate the rolling annualized standard deviation.

###### Parameters

**```ts```** :&ensp;<code>pd.DateFrame</code>
:   A dataframe with 'open', 'high', 'low', 'close', 'volume'.


**```lookback```** :&ensp;<code>float</code>, optional
:   The number of years to lookback, e.g. 5 years.  1/12 can be
    used for 1 month.  Likewise 3/12 for 3 months, etc...
    (default is 5).


**```price```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   Input_array column to use for price (default is 'close').


**```prevday```** :&ensp;<code>bool</code>, optional
:   True will shift the series forward.  Unless you are buying
    on the close, you'll likely want to set this to True.
    It gives you the previous day's Volatility (default is False).

###### Returns

**```s```** :&ensp;<code>pd.Series</code>
:   Series that contains the rolling annualized standard deviation.

###### Raises

<code>ValueError</code>
:   If the lookback is not positive.

###### Examples

```python-repl
>>> std_dev_1mo = pf.ANNUALIZED_STANDARD_DEVIATION(ts,lookback=1/12)
>>> std_dev_3mo = pf.ANNUALIZED_STANDARD_DEVIATION(ts, lookback=3/12)
>>> std_dev_1yr = pf.ANNUALIZED_STANDARD_DEVIATION(ts, lookback=1)
>>> std_dev_3yr = pf.ANNUALIZED_STANDARD_DEVIATION(ts, lookback=3)
>>> std_dev_5yr = pf.ANNUALIZED_STANDARD_DEVIATION(ts, lookback=5)
```


    
### Function `CROSSOVER` {#id}




>     def CROSSOVER(
>         ts,
>         timeperiod_fast=50,
>         timeperiod_slow=200,
>         func_fast=<function SMA>,
>         func_slow=<function SMA>,
>         band=0,
>         price='close',
>         prevday=False
>     )


This indicator is used to represent regime direction and duration.

For example, an indicator value of 50 means a bull market that has
persisted for 50 days, whereas -20 means a bear market that has
persisted for 20 days.

More generally, this is a crossover indicator for two moving
averages.  The indicator is positive when the fast moving average
is above the slow moving arverage, and negative when the fast
moving average is below the slow moving average.

###### Parameters

**```ts```** :&ensp;<code>pd.DateFrame</code>
:   A dataframe with 'open', 'high', 'low', 'close', 'volume'.


**```timeperiod_fast```** :&ensp;<code>int</code>, optional
:   The timeperiod for the fast moving average (default is 50).


**```timeperiod_slow```** :&ensp;<code>int</code>, optional
:   The timeperiod for the slow moving average (default is 200).


**```func_fast```** :&ensp;<code>Function</code>, optional
:   {pf.SMA, pf.EMA} (pinkfish functions) or
    {SMA, DEMA, EMA, KAMA, T3, TEMA, TRIMA, WMA} (ta-lib functions)
    The function for fast moving average (default is pf.SMA).
    MAMA not compatible.


**```func_slow```** :&ensp;<code>Function</code>, optional
:   {pf.SMA, pf.EMA} (pinkfish functions) or
    {SMA, DEMA, EMA, KAMA, T3, TEMA, TRIMA, WMA} (ta-lib functions)
    The function for fast moving average (default is pf.SMA).
    MAMA not compatible.


**```band```** :&ensp;`float, {0-100}`, optional
:   Percent band around the slow moving average.
    (default is 0, which implies no band is used).


**```price```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   Input_array column to use for price (default is 'close').


**```prevday```** :&ensp;<code>bool</code>, optional
:   True will shift the series forward.  Unless you are buying
    on the close, you'll likely want to set this to True.
    It gives you the previous day's CrossOver (default is False).

###### Returns

**```s```** :&ensp;<code>pd.Series</code>
:   Series that contains the rolling regime indicator values.

###### Raises

<code>[TradeCrossOverError](#pinkfish.indicator.TradeCrossOverError "pinkfish.indicator.TradeCrossOverError")</code>
:   If one of the timeperiods specified is invalid.

###### Examples

```python-repl
>>> ts['regime'] = pf.CROSSOVER(ts, timeperiod_fast=50,
                                timeperiod_slow=200)
```


    
### Function `EMA` {#id}




>     def EMA(
>         ts,
>         timeperiod=30,
>         price='close'
>     )


This indicator computes an exponential moving average.

Can be used in place of talib EMA.

ts : pd.DateFrame or pd.Series
    A dataframe with 'open', 'high', 'low', 'close', 'volume' or
    a series of price data.
timeperiod: int, optional
    The timeperiod for the moving average (default is 30).
price : str, optional {'close', 'open', 'high', 'low'}
    Input_array column to use for price (default is 'close').
    Not used if <code>ts</code> is a series.

###### Returns

<code>pd.Series</code>
:   Series that contains the simple moving average.

###### Examples

```python-repl
>>> ts['ema50'] = pf.EMA(ts, timeperiod=50)
```


    
### Function `MOMENTUM` {#id}




>     def MOMENTUM(
>         ts,
>         lookback=1,
>         time_frame='monthly',
>         price='close',
>         prevday=False
>     )


This indicator is used to represent momentum is security prices.

Percent price change is used to calculate momentum.  Momentum
is positive if the price since the lookback period has increased.
Likewise, if price has decreased since the lookback period,
momentum is negative.  Percent change is used to normalize
asset prices for comparison.

###### Parameters

**```ts```** :&ensp;<code>pd.DateFrame</code>
:   A dataframe with 'open', 'high', 'low', 'close', 'volume'.


**```lookback```** :&ensp;<code>int</code>, optional
:   The number of time frames to lookback, e.g. 2 months
    (default is 1).


**```timeframe```** :&ensp;<code>str</code>, optional `{'monthly', 'daily', 'weekly', 'yearly'}`
:   The unit or timeframe type of lookback (default is 'monthly').


**```price```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   Input_array column to use for price (default is 'close').


**```prevday```** :&ensp;<code>bool</code>, optional
:   True will shift the series forward.  Unless you are buying
    on the close, you'll likely want to set this to True.
    It gives you the previous day's Momentum (default is False).

###### Returns

**```s```** :&ensp;<code>pd.Series</code>
:   Series that contains the rolling momentum indicator values.

###### Raises

<code>ValueError</code>
:   If the lookback is not positive or the time_frame is invalid.

###### Examples

```python-repl
>>> ts['mom'] = pf.MOMENTUM(ts, lookback=6, time_frame='monthly')
```


    
### Function `SMA` {#id}




>     def SMA(
>         ts,
>         timeperiod=30,
>         price='close'
>     )


This indicator computes a simple moving average.

Can be used in place of talib SMA.

ts : pd.DateFrame or pd.Series
    A dataframe with 'open', 'high', 'low', 'close', 'volume' or
    a series of price data.
timeperiod: int, optional
    The timeperiod for the moving average (default is 30).
price : str, optional {'close', 'open', 'high', 'low'}
    Input_array column to use for price (default is 'close').
    Not used if <code>ts</code> is a series.

###### Returns

<code>pd.Series</code>
:   Series that contains the simple moving average.

###### Examples

```python-repl
>>> ts['sma50'] = pf.SMA(ts, timeperiod=50)
```


    
### Function `VOLATILITY` {#id}




>     def VOLATILITY(
>         ts,
>         lookback=20,
>         time_frame='yearly',
>         downside=False,
>         price='close',
>         prevday=False
>     )


This indicator is used to represent volatility in security prices.

Volatility is represented as the standard deviation.  Volatility
is calculated over the lookback period, then we scale to the
time frame.  Volatility scales with the square root of time.
For example,  if the market’s daily volatility is 0.5%, then
volatility for two days is the square root of 2 times
the daily volatility (0.5% * 1.414 = 0.707%).  We use the square
root of time to scale from daily to weely, monthly, or yearly.

###### Parameters

**```ts```** :&ensp;<code>pd.DateFrame</code>
:   A dataframe with 'open', 'high', 'low', 'close', 'volume'.


**```lookback```** :&ensp;<code>int</code>, optional
:   The number of time frames to lookback, e.g. 2 months
    (default is 1).


**```timeframe```** :&ensp;<code>str</code>, optional `{'yearly', 'daily', 'weekly', 'monthly'}`
:   The unit or timeframe used for scaling.  For example, if the
    lookback is 20 and the timeframe is 'yearly', then we compute
    the 20 day volatility and scale to 1 year.
    (default is 'yearly').


**```downside```** :&ensp;<code>bool</code>, optional
:   True to calculate the downside volatility (default is False).


**```price```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   Input_array column to use for price (default is 'close').


**```prevday```** :&ensp;<code>bool</code>, optional
:   True will shift the series forward.  Unless you are buying
    on the close, you'll likely want to set this to True.
    It gives you the previous day's Volatility (default is False).

###### Returns

**```s```** :&ensp;<code>pd.Series</code>
:   A new column that contains the rolling volatility.

###### Raises

<code>ValueError</code>
:   If the lookback is not positive or the time_frame is invalid.

###### Examples

```python-repl
>>> ts['vola'] = pf.VOLATILITY(ts, lookback=20, time_frame='yearly')
```



    
## Classes


    
### Class `IndicatorError` {#id}




>     class IndicatorError(
>         *args,
>         **kwargs
>     )


Base indicator exception.


    
#### Ancestors (in MRO)

* [builtins.Exception](#builtins.Exception)
* [builtins.BaseException](#builtins.BaseException)


    
#### Descendants

* [pinkfish.indicator.TradeCrossOverError](#pinkfish.indicator.TradeCrossOverError)





    
### Class `TradeCrossOverError` {#id}




>     class TradeCrossOverError(
>         *args,
>         **kwargs
>     )


Invalid timeperiod specified.


    
#### Ancestors (in MRO)

* [pinkfish.indicator.IndicatorError](#pinkfish.indicator.IndicatorError)
* [builtins.Exception](#builtins.Exception)
* [builtins.BaseException](#builtins.BaseException)








    
# Module `pinkfish.itable` {#id}

Keep track of styles for cells/headers in PrettyTable.

The MIT License (MIT)

Copyright (c) 2014 Melissa Gymrek <mgymrek@mit.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.





    
## Classes


    
### Class `CellStyle` {#id}




>     class CellStyle


Styles for cells PrettyTable







    
#### Methods


    
##### Method `column_format` {#id}




>     def column_format(
>         self,
>         x
>     )




    
##### Method `copy` {#id}




>     def copy(
>         self
>     )




    
##### Method `css` {#id}




>     def css(
>         self
>     )




    
##### Method `set` {#id}




>     def set(
>         self,
>         key,
>         value
>     )




    
### Class `PrettyTable` {#id}




>     class PrettyTable(
>         df,
>         tstyle=None,
>         header_row=False,
>         header_col=True,
>         center=False,
>         rpt_header=0
>     )


Formatted tables for display in IPython notebooks

df: pandas.DataFrame
style: TableStyle
header_row: include row headers
header_col: include column headers







    
#### Methods


    
##### Method `copy` {#id}




>     def copy(
>         self
>     )




    
##### Method `reset_cell_style` {#id}




>     def reset_cell_style(
>         self,
>         rows=None,
>         cols=None
>     )


Reset existing cell style to defaults

    
##### Method `reset_col_header_style` {#id}




>     def reset_col_header_style(
>         self,
>         indices=None
>     )


Reset col header style to defaults

    
##### Method `reset_corner_style` {#id}




>     def reset_corner_style(
>         self
>     )


Reset corner style to defaults

    
##### Method `reset_row_header_style` {#id}




>     def reset_row_header_style(
>         self,
>         indices=None
>     )


Reset row header style to defaults

    
##### Method `set_cell_style` {#id}




>     def set_cell_style(
>         self,
>         style=None,
>         tuples=None,
>         rows=None,
>         cols=None,
>         format_function=None,
>         **kwargs
>     )


Apply cell style to rows and columns specified

    
##### Method `set_col_header_style` {#id}




>     def set_col_header_style(
>         self,
>         style=None,
>         indices=None,
>         format_function=None,
>         **kwargs
>     )


Apply style to header at specific index
If index is None, apply to all headings

    
##### Method `set_corner_style` {#id}




>     def set_corner_style(
>         self,
>         style=None,
>         format_function=None,
>         **kwargs
>     )


Apply style to the corner cell

    
##### Method `set_row_header_style` {#id}




>     def set_row_header_style(
>         self,
>         style=None,
>         indices=None,
>         format_function=None,
>         **kwargs
>     )


Apply style to header at specific index
If index is None, apply to all headings

    
##### Method `update_cell_style` {#id}




>     def update_cell_style(
>         self,
>         rows=None,
>         cols=None,
>         format_function=None,
>         **kwargs
>     )


Update existing cell style

    
##### Method `update_col_header_style` {#id}




>     def update_col_header_style(
>         self,
>         indices=None,
>         format_function=None,
>         **kwargs
>     )


Update existing row header tyle

    
##### Method `update_corner_style` {#id}




>     def update_corner_style(
>         self,
>         format_function=None,
>         **kwargs
>     )


Update the corner style

    
##### Method `update_row_header_style` {#id}




>     def update_row_header_style(
>         self,
>         indices=None,
>         format_function=None,
>         **kwargs
>     )


Update existing row header tyle

    
### Class `TableStyle` {#id}




>     class TableStyle(
>         theme=None
>     )


Keep track of styles for cells/headers in PrettyTable









    
# Module `pinkfish.pfcalendar` {#id}

Adds calendar columns to a timeseries.

 - <code>dotw</code> : int, {0-6}
    Day of the week with Monday=0, Sunday=6.

 - <code>dotm</code> : int, {1,2,...}
    Day of the month as 1,2,...

 - <code>doty</code> : int, {1,2,...}
    Day of the year as 1,2,...

 - <code>month</code> : int, {1-12}
    Month as January=1,...,December=12

 - <code>first\_dotw</code> : bool
    First trading day of the week.

 - <code>last\_dotw</code> : bool
    Last trading day of the week.

 - <code>first\_dotm</code> : bool
    First trading day of the month.

 - <code>last\_dotm</code> : bool
    Last trading day of the month.

 - <code>first\_doty</code> : bool
    First trading day of the year.

 - <code>last\_doty</code> : bool
    Last trading day of the year.




    
## Functions


    
### Function `calendar` {#id}




>     def calendar(
>         ts
>     )


Add calendar columns to a timeseries.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of a symbol.

###### Returns

<code>pd.DataFrame</code>
:   The timeseries with calendar columns added.






    
# Module `pinkfish.pfstatistics` {#id}

Calculate trading statistics.

The stats() function returns the following metrics in a pd.Series.

 - <code>start</code> : str
   The date when trading begins formatted as YY-MM-DD.

 - <code>end</code> : str
   The date when trading ends formatted as YY-MM-DD.

 - <code>beginning\_balance</code> : int
    The initial capital.

 - <code>ending\_balance</code> : float
    The ending capital.

 - <code>total\_net\_profit</code> : float
    Total value of all profitable trades minus all losing trades.

 - <code>gross\_profit</code> : float
    Total value of all profitable trades.

 - <code>gross\_loss</code> : float
    Total value of all losing trades.

 - <code>profit\_factor</code> : float
    The Ratio of the total profits from profitable trades divided by
    the total loses from losing trades.  A break-even system has a
    profit factor of 1.

 - <code>return\_on\_initial\_capital</code> : float
    The ratio of gross profit divided by the initial capital and
    multiplied by 100.

 - <code>annual\_return\_rate</code> : float
    The compound annual growth rate of the strategy.

 - <code>trading\_period</code> : str
    The trading time frame expressed as years, monthe, and days.

 - <code>pct\_time\_in\_market</code> : float
    The percentage of days in which the strategy is not completely
    holding cash.

 - <code>margin</code> : float
    The buying power in dollars divided by the capital.  For example,
    if the margin is 2 and the capital is $10,000, then the buying
    power is $20,000.

 - <code>avg\_leverage</code> : float
    Leverage is the total value of securities held plus any cash,
    divided by the total value of securities held plus cash minus
    loans.  The average leverage is just the average daily leverage
    over the life of the strategy.

 - <code>max\_leverage</code> : float
    The maximum daily leverage over the life of the strategy.

 - <code>min\_leverage</code> : floatpppppppppppppppppppppppppp
    The minimum daily leverage over the life of the strategy.

 - <code>total\_num\_trades</code> : int
    The number of closed trades.

 - <code>trades\_per\_year</code> : float
    The average number of closed trades per year.

 - <code>num\_winning\_trades</code> : int
    The number of profitable trades.

 - <code>num\_losing\_trades</code> : int
    The number of losing trades.

 - <code>num\_even\_trades</code> : int
    The number of break even trades.

 - <code>pct\_profitable\_trades</code> : float
    The number of winning trades divided by the total number of closed
    trades and multiplied by 100.

 - <code>avg\_profit\_per\_trade</code> : float
    The total net profit divided by the total number of closed trades
    and multiplied by 100.

 - <code>avg\_profit\_per\_winning\_trade</code> : float
    The gross profit divided by the number of winning trades.

 - <code>avg\_loss\_per\_losing\_trade</code> : float
    The gross loss divided by the number of losing trades.  This
    quantity is negative.

 - <code>ratio\_avg\_profit\_win\_loss</code> : float
    The absolute value of the average profit per winning trade divided
    by the average loss per losing trade.

 - <code>largest\_profit\_winning\_trade</code> : float
    The single largest profit for all winning trades.

 - <code>largest\_loss\_losing\_trade</code> : float
    The single largest loss for all losing trades.

 - <code>num\_winning\_points</code> : float
    The sum of the increase in points from all winning trades.

 - <code>num\_losing\_points</code> : float
    The sum of the decrease in points from all losing trades.  This
    quantity is negative.

 - <code>total\_net\_points</code> : float
    The mathematical difference between winning points and
    losing points.

 - <code>avg\_points</code> : float
    The total net points divided by the total number of trades.

 - <code>largest\_points\_winning\_trade</code> : float
    The single largest point increase for all winning trades.

 - <code>largest\_points\_losing\_trade</code> : float
    The single largest point decrease for all losing trades.

 - <code>avg\_pct\_gain\_per\_trade</code> : float
    The average percentage gain for all trades.

 - <code>largest\_pct\_winning\_trade</code> : float
    The single largest percent increase for all winning trades.

 - <code>largest\_pct\_losing\_trade</code> : float
    The single largest percent decrease for all losing trades.

 - <code>expected\_shortfall</code> : float
    The expected shortfall is calculated by taking the average of
    returns in the worst 5% of cases.  In other words, it is the
    average percent loss of the worst 5% of losing trades.

 - <code>max\_consecutive\_winning\_trades</code> : int
    The longest winning streak in trades.

 - <code>max\_consecutive\_losing\_trades</code> : int
    The longest losing streak in trades.

 - <code>avg\_bars\_winning\_trades</code> : float
    On average, how long a winning trade takes in market days.

 - <code>avg\_bars\_losing\_trades</code> : float
    On average, how long a losing trade takes in market days.

 - <code>max\_closed\_out\_drawdown</code> : float
    Worst peak minus trough balance based on closing prices.

 - <code>max\_closed\_out\_drawdown\_peak\_date</code> : str
    The beginning and peak date of the largest drawdown formatted
    as YY-MM-DD.  The balance hit it's highest point on this date.

 - <code>max\_closed\_out\_drawdown\_trough\_date</code> : str
    The trough date of the largest drawdown.  The balance hit it's
    lowest point on this date.

 - <code>max\_closed\_out\_drawdown\_recovery\_date</code> : str
    The end date of the largest drawdown.  The date in which the
    balance has equaled the peak value again.

 - <code>drawdown\_loss\_period</code> : int
    The number of calendar days from peak to trough.

 - <code>drawdown\_recovery\_period</code> : int
    The number of calendar days from trough to recovery.

 - <code>annualized\_return\_over\_max\_drawdown</code> : float
    Annual return rate divided by the max drawdown.

 - <code>max\_intra\_day\_drawdown</code> : float
    Worst peak minus trough balance based on intraday values.

 - <code>avg\_yearly\_closed\_out\_drawdown</code> :float
    The average yearly drawdown calculated using every available
    market year period.  In other words, every rollowing window of 252
    market days is taken as a different year in the calculation.

 - <code>max\_yearly\_closed\_out\_drawdown</code> : float
    Worst peak minus trough balance based on closing prices during any
    252 market day period.

 - <code>avg\_monthly\_closed\_out\_drawdown</code> : float
    The average monthly drawdown calculated using every available
    market month period.  In other words, every rollowing window of 20
    market days is taken as a different month in the calculation.

 - <code>max\_monthly\_closed\_out\_drawdown</code> : float
    Worst peak minus trough balance based on closing prices during any
    20 market day period.

 - <code>avg\_weekly\_closed\_out\_drawdown</code> : float
    The average weekly drawdown calculated using every available
    market week period.  In other words, every rollowing window of 5
    market days is taken as a different week in the calculation.

 - <code>max\_weekly\_closed\_out\_drawdown</code> : float
    Worst peak minus trough balance based on closing prices during any
    5 market day period.

 - <code>avg\_yearly\_closed\_out\_runup</code> : float
    The average yearly runup calculated using every available
    market year period.  In other words, every rollowing window of 252
    market days is taken as a different year in the calculation.

 - <code>max\_yearly\_closed\_out\_runup</code> : float
    Best peak minus trough balance based on closing prices during any
    252 market day period.

 - <code>avg\_monthly\_closed\_out\_runup</code> : float
    The average monthly runup calculated using every available
    market month period.  In other words, every rollowing window of 20
    market days is taken as a different month in the calculation.

 - <code>max\_monthly\_closed\_out\_runup</code> : float
    Best peak minus trough balance based on closing prices during any
    20 market day period.

 - <code>avg\_weekly\_closed\_out\_runup</code> : float
    The average weekly runup calculated using every available
    market week period.  In other words, every rollowing window of 5
    market days is taken as a different week in the calculation.

 - <code>max\_weekly\_closed\_out\_runup</code> : float
    Best peak minus trough balance based on closing prices during any
    5 market day period.

 - <code>pct\_profitable\_years</code> : float
    The percentage of all years that were profitable.  In other words,
    the percentage of 252 market day periods that were profitable.

 - <code>best\_year</code> : float
    The percentage increase in balance of the best year.

 - <code>worst\_year</code> : float
    The percentage decrease in balance of the worst year.

 - <code>avg\_year</code> : float
    The percentage change per year on average.

 - <code>annual\_std</code> : float
    The yearly standard deviation over the entire trading period.

 - <code>pct\_profitable\_months</code> : float
    The percentage of all months that were profitable.  In other words,
    the percentage of 20 market day periods that were profitable.

 - <code>best\_month</code> : float
    The percentage increase in balance of the best month.

 - <code>worst\_month</code> : float
    The percentage decrease in balance of the worst month.

 - <code>avg\_month</code> : float
    The percentage change per month on average.

 - <code>monthly\_std</code> : float
    The monthly standard deviation over the entire trading period.

 - <code>pct\_profitable\_weeks</code> : float
    The percentage of all weeks that were profitable.  In other words,
    the percentage of 5 market day periods that were profitable.

 - <code>best\_week</code> : float
    The percentage increase in balance of the best week.

 - <code>worst\_week</code> : float
    The percentage decrease in balance of the worst week.

 - <code>avg\_week</code> : float
    The percentage change per week on average.

 - <code>weekly\_std</code> : float
    The weekly standard deviation over the entire trading period.

 - <code>pct\_profitable\_weeks</code> : float
    The percentage of all weeks that were profitable.  In other words,
    the percentage of 5 market day periods that were profitable.

 - <code>weekly\_std</code> : float
    The weekly standard deviation over the entire trading period.

 - <code>pct\_profitable\_days</code> : float
    The percentage of all days that were profitable.

 - <code>best\_day</code> : float
    The percentage increase in balance of the best day.

 - <code>worst\_day</code> : float
    The percentage decrease in balance of the worst day.

 - <code>avg\_day</code> : float
    The percentage change per day on average.

 - <code>daily\_std</code> : float
    The daily standard deviation over the entire trading period.

 - <code>sharpe\_ratio</code> : float
    A measure of risk adjusted return.  The ratio is the average return
    per unit of volatility, i.e. standard deviation.

 - <code>sharpe\_ratio\_max</code> : float
    The maximum expected sharpe ratio. It is the sharpe ratio plus
    3 standard deviations of the sharpe ratio.  99.73% of sharpe ratios
    are theoretically below this value.

 - <code>sharpe\_ratio\_min</code> : float
    The mimimum expected sharpe ratio. It is the sharpe ratio minus
    3 standard deviations of the sharpe ratio.  99.73% of sharpe ratios
    are theoretically above this value.

 - <code>sortino\_ratio</code> : float
    A variation of the Sharpe ratio that differentiates harmful
    volatility from overall volatility by using the asset's standard
    deviation of negative portfolio returns (downside deviation)
    instead of the total standard deviation.



    
## Variables


    
### Variable `ALPHA_BEGIN` {#id}




tuple : Use with <code>select\_timeseries</code>, beginning data for any timeseries.

    
### Variable `SP500_BEGIN` {#id}




tuple : Use with <code>select\_timeseries</code>, date the S&P500 began.

    
### Variable `TRADING_DAYS_PER_MONTH` {#id}




int : The number of trading days per month.

    
### Variable `TRADING_DAYS_PER_WEEK` {#id}




int : The number of trading days per week.

    
### Variable `TRADING_DAYS_PER_YEAR` {#id}




int : The number of trading days per year.

    
### Variable `currency_metrics` {#id}




tuple : Currency metrics for summary().

The metrics are:

    'beginning_balance'  
    'ending_balance'  
    'total_net_profit'  
    'gross_profit'  
    'gross_loss'

    
### Variable `default_metrics` {#id}




tuple : Default metrics for summary().

The metrics are:

    'annual_return_rate'  
    'max_closed_out_drawdown'  
    'best_month'  
    'worst_month'  
    'sharpe_ratio'  
    'sortino_ratio'  
    'monthly_std'  
    'annual_std'


    
## Functions


    
### Function `currency` {#id}




>     def currency(
>         amount
>     )


Returns the dollar amount in US currency format.

###### Parameters

**```amount```** :&ensp;<code>float</code>
:   The dollar amount to convert.

###### Returns

<code>str</code>
:   the dollar amount in US currency format.



    
### Function `get_trading_days` {#id}




>     def get_trading_days()


Returns the number of trading days per year, month, and week.

    
### Function `optimizer_summary` {#id}




>     def optimizer_summary(
>         strategies,
>         metrics
>     )


Generate summary dataframe of a set of strategies vs metrics.

This function is designed to be used in analysis of an
optimization of some parameter.  <code>[stats()](#pinkfish.pfstatistics.stats "pinkfish.pfstatistics.stats")</code> must be called for
each strategy before calling this function.

###### Parameters

**```strategies```** :&ensp;<code>pd.Series</code>
:   Series of strategy objects that have the <code>[stats()](#pinkfish.pfstatistics.stats "pinkfish.pfstatistics.stats")</code> attribute.


**```metrics```** :&ensp;<code>tuple</code>
:   The metrics to be used in the summary.

###### Returns

**```df```** :&ensp;<code>pf.DataFrame</code>
:   Summary of strategies vs metrics.



    
### Function `select_trading_days` {#id}




>     def select_trading_days(
>         use_stock_market_calendar
>     )


Select between continuous and standard stock market days.

Set use_stock_market_calendar=False if your timeseries is 7 days
a week, e.g. cryptocurrencies.

###### Parameters

**```use_stock_market_calendar```** :&ensp;<code>bool</code>
:   True for standard stock market calendar.  False for trading
    7 days a week.

###### Returns

<code>None</code>
:   &nbsp;



    
### Function `stats` {#id}




>     def stats(
>         ts,
>         tlog,
>         dbal,
>         capital
>     )


Compute trading stats.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of a symbol.


**```tlog```** :&ensp;<code>pd.DataFrame</code>
:   The trade log.


**```dbal```** :&ensp;<code>pd.DataFrame</code>
:   The daily balance.


**```capital```** :&ensp;<code>int</code>
:   The amount of money available for trading.

###### Examples

```python-repl
>>> stats = pf.stats(ts, tlog, dbal, capital)
```


###### Returns

**```stats```** :&ensp;<code>pd.Series</code>
:   The statistics for the strategy.



    
### Function `summary` {#id}




>     def summary(
>         stats,
>         benchmark_stats=None,
>         metrics=('annual_return_rate', 'max_closed_out_drawdown', 'best_month', 'worst_month', 'sharpe_ratio', 'sortino_ratio', 'monthly_std', 'annual_std'),
>         extras=None
>     )


Returns stats summary.

<code>[stats()](#pinkfish.pfstatistics.stats "pinkfish.pfstatistics.stats")</code> must be called before calling this function.

###### Parameters

**```stats```** :&ensp;<code>pd.Series</code>
:   Statistics for the strategy.


**```benchmark_stats```** :&ensp;<code>pd.Series, optimal</code>
:   Statistics for the benchmark (default is None, which implies
    that a benchmark is not being used).


**```metrics```** :&ensp;<code>tuple</code>, optional
:   The metrics to be used in the summary (default is
    <code>[default\_metrics](#pinkfish.pfstatistics.default\_metrics "pinkfish.pfstatistics.default\_metrics")</code>).


**```extras```** :&ensp;<code>tuple</code>, optional
:   The extra metrics to be used in the summary (default is None,
    which imples that no extra metrics are being used).






    
# Module `pinkfish.plot` {#id}

Plotting functions.



    
## Variables


    
### Variable `default_metrics` {#id}




tuple : Default metrics for plot_bar_graph().

The metrics are:

    'annual_return_rate'  
    'max_closed_out_drawdown'  
    'annualized_return_over_max_drawdown'  
    'best_month'  
    'worst_month'  
    'sharpe_ratio'  
    'sortino_ratio'  
    'monthly_std'  
    'annual_std'


    
## Functions


    
### Function `optimizer_plot_bar_graph` {#id}




>     def optimizer_plot_bar_graph(
>         df,
>         metric
>     )


Plot Bar Graph of a metric for a set of strategies.

This function is designed to be used in analysis of an
optimization of some parameter.  First call optimizer_summary()
to generate the dataframe required by this function.

###### Parameters

**```df```** :&ensp;<code>pd.DataFrame</code>
:   Summary of strategies vs metrics.


**```metric```** :&ensp;<code>str</code>
:   The metric to be used in the summary.



    
### Function `plot_bar_graph` {#id}




>     def plot_bar_graph(
>         stats,
>         benchmark_stats=None,
>         metrics=('annual_return_rate', 'max_closed_out_drawdown', 'annualized_return_over_max_drawdown', 'best_month', 'worst_month', 'sharpe_ratio', 'sortino_ratio', 'monthly_std', 'annual_std'),
>         extras=None,
>         fname=None
>     )


Plot Bar Graph: Strategy vs Benchmark (optional).

###### Parameters

**```stats```** :&ensp;<code>pd.Series</code>
:   Statistics from the strategy.


**```benchmark_stats```** :&ensp;<code>pd.Series</code>, optional
:   Statistics from the benchmark (default is None, which implies
    that a benchmark is not being used).


**```metrics```** :&ensp;<code>tuple</code>, optional
:   The metrics to be plotted (default is <code>[default\_metrics](#pinkfish.plot.default\_metrics "pinkfish.plot.default\_metrics")</code>).


**```extras```** :&ensp;<code>tuple</code>, optional
:   The additional metrics to be plotted (default is None, which
    implies no extra metrics should be added).


**```fname```** :&ensp;<code>str</code> or `path-like` or `file-like`, optional
:   Save the current figure to fname (default is None, which
    implies to not output the figure to a file).

###### Returns

<code>pd.DataFrame</code>
:   Summary metrics.



    
### Function `plot_equity_curve` {#id}




>     def plot_equity_curve(
>         strategy,
>         benchmark=None,
>         yscale='linear',
>         fname=None
>     )


Plot Equity Curve: Strategy and (optionally) Benchmark.

###### Parameters

**```strategy```** :&ensp;<code>pd.DataFrame</code>
:   Daily balance for the strategy.


**```benchmark```** :&ensp;<code>pd.DataFrame</code>, optional
:   Daily balance for the benchmark (default is None, which implies
    that a benchmark is not being used).


**```yscale```** :&ensp;`str, {'linear', 'log', 'symlog', 'logit'}`
:   The axis scale type to apply (default is 'linear')


**```fname```** :&ensp;<code>str</code> or `path-like` or `file-like`, optional
:   Save the current figure to fname (default is None, which
    implies to not output the figure to a file).

###### Returns

<code>None</code>
:   &nbsp;



    
### Function `plot_equity_curves` {#id}




>     def plot_equity_curves(
>         strategies,
>         labels=None,
>         yscale='linear',
>         fname=None
>     )


Plot one or more equity curves on the same plot.

###### Parameters

**```strategies```** :&ensp;<code>pd.Series</code> of <code>pd.Dataframe</code>
:   Container of strategy daily balance for each symbol.


**```labels```** :&ensp;<code>list</code> of <code>str</code>, optional
:   List of labels for each strategy (default is None, which implies
    that <code>strategy.symbol</code> is used as the label.


**```yscale```** :&ensp;`str, {'linear', 'log', 'symlog', 'logit'}`
:   The axis scale type to apply (default is 'linear')


**```fname```** :&ensp;<code>str</code> or `path-like` or `file-like`, optional
:   Save the current figure to fname (default is None, which
    implies to not output the figure to a file).

###### Returns

<code>None</code>
:   &nbsp;



    
### Function `plot_trades` {#id}




>     def plot_trades(
>         strategy,
>         benchmark=None,
>         yscale='linear',
>         fname=None
>     )


Plot Trades.

Benchmark is the equity curve that the trades get plotted on.
If not provided, strategy equity curve is used.

###### Parameters

**```strategy```** :&ensp;<code>pd.DataFrame</code>
:   Daily balance for the strategy.


**```benchmark```** :&ensp;<code>pd.DataFrame</code>, optional
:   Daily balance for the benchmark.


**```yscale```** :&ensp;`str, {'linear', 'log', 'symlog', 'logit'}`
:   The axis scale type to apply (default is 'linear')


**```fname```** :&ensp;<code>str</code> or `path-like` or `file-like`, optional
:   Save the current figure to fname (default is None, which
    implies to not output the figure to a file).

###### Returns

<code>None</code>
:   &nbsp;






    
# Module `pinkfish.portfolio` {#id}

Portfolio backtesting.




    
## Functions


    
### Function `technical_indicator` {#id}




>     def technical_indicator(
>         symbols,
>         output_column_suffix,
>         input_column_suffix='close'
>     )


Decorator for adding a technical indicator to portfolio symbols.

A new column will be added for each symbol.  The name of the
new column will be the symbol name, an underscore, and the
<code>output\_column\_suffix</code>.  For example, 'SPY_MA30' is the symbol
SPY with <code>output\_column\_suffix</code> equal to MA30.

<code>func</code> is a wrapper for a technical analysis function.  The
actual technical analysis function could be from ta-lib,
pandas, pinkfish indicator, or a custom user function.

'func' must have the positional argument <code>ts</code> and keyword argument
<code>input\_column</code>.  'ts` is passed in, but input_column (args[1]) is
assigned in the wrapper before <code>func</code> is called.

###### Parameters

**```symbols```** :&ensp;<code>list</code>
:   The symbols that constitute the portfolio.


**```output_column_suffix```** :&ensp;<code>str</code>
:   Output column suffix to use for technical indicator.


**```input_column_suffix```** :&ensp;`str, {'close', 'open', 'high', 'low'}`
:   Input column suffix to use for price (default is 'close').

###### Returns

**```decorator```** :&ensp;<code>function</code>
:   A wrapper that adds technical indicators to portfolio
    symbols.

###### Examples

```python-repl
>>> # Technical indicator: volatility.
>>> @pf.technical_indicator(symbols, 'vola', 'close')
>>> def _volatility(ts, input_column=None):
...     return pf.VOLATILITY(ts, price=input_column)
>>> ts = _volatility(ts)
```



    
## Classes


    
### Class `Portfolio` {#id}




>     class Portfolio


A portfolio or collection of securities.

#### Methods

 - fetch_timeseries()
   Get time series data for symbols.

 - add_technical_indicator()
   Add a technical indicator for each symbol in the portfolio.

 - calendar()
   Add calendar columns.

 - finalize_timeseries()
   Finalize timeseries.

 - get_price()
   Return price given row, symbol, and field.

 - get_prices()
   Return dict of prices for all symbols given row and fields.

 - shares()
   Return number of shares for given symbol in portfolio.

 - positions
   Gets the active symbols in portfolio as a list.

 - share_percent()
   Return share value of symbol as a percentage of <code>total\_funds</code>.

 - adjust_percent()
   Adjust symbol to a specified weight (percent) of portfolio.

 - print_holdings()
   Print snapshot of portfolio holding and values.

 - init_trade_logs()
   Add a trade log for each symbol.

 - record_daily_balance()
   Append to daily balance list.

 - get_logs()
   Return raw tradelog, tradelog, and daily balance log.

 - performance_per_symbol()
   Returns performance per symbol data, also plots performance.

 - correlation_map()
   Show correlation map between symbols.

Initialize instance variables.

#### Attributes

**```_l```** :&ensp;<code>list</code> of <code>tuples</code>
:   The list of daily balance tuples.


**```_ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of the portfolio.


**```symbols```** :&ensp;<code>list</code>
:   The symbols that constitute the portfolio.







    
#### Instance variables


    
##### Variable `positions` {#id}




Return the active symbols in portfolio as a list.

This returns only those symbols that currently have shares
allocated to them, either long or short.

###### Parameters

**```None```**
:   &nbsp;

###### Returns

<code>list</code> of <code>str</code>
:   The active symbols in portfolio.





    
#### Methods


    
##### Method `add_technical_indicator` {#id}




>     def add_technical_indicator(
>         self,
>         ts,
>         ta_func,
>         ta_param,
>         output_column_suffix,
>         input_column_suffix='close'
>     )


Add a technical indicator for each symbol in the portfolio.

A new column will be added for each symbol.  The name of the
new column will be the symbol name, an underscore, and the
<code>output\_column\_suffix</code>.  For example, 'SPY_MA30' is the symbol
SPY with <code>output\_column\_suffix</code> equal to MA30.

<code>ta\_func</code> is a wrapper for a technical analysis function.  The
actual technical analysis function could be from ta-lib,
pandas, pinkfish indicator, or a custom user function.
<code>ta\_param</code> is used to pass 1 parameter to <code>ta\_func</code>.  Other
parameters could be passed to the technical indicator within
<code>ta\_func</code>.  If you need to mass more than 1 paramters to
<code>ta\_func</code>, you could make <code>ta\_param</code> a dict.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of the portfolio.


**```ta_func```** :&ensp;<code>function</code>
:   A wrapper for a technical analysis function.


**```ta_param```** :&ensp;<code>object</code>
:   The parameter for <code>ta\_func</code> (typically an int).


**```output_column_suffix```** :&ensp;<code>str</code>
:   Output column suffix to use for technical indicator.


**```input_column_suffix```** :&ensp;`str, {'close', 'open', 'high', 'low'}`
:   Input column suffix to use for price (default is 'close').

###### Returns

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   Timeseries with new column for technical indicator.

###### Examples

```python-repl
>>> # Add technical indicator: X day high
>>> def period_high(ts, ta_param, input_column):
>>>     return pd.Series(ts[input_column]).rolling(ta_param).max()
```


```python-repl
>>> ts = portfolio.add_technical_indicator(
>>>     ts, ta_func=_period_high, ta_param=period,
>>>     output_column_suffix='period_high'+str(period),
>>>     input_column_suffix='close')
```


    
##### Method `adjust_percent` {#id}




>     def adjust_percent(
>         self,
>         date,
>         price,
>         weight,
>         symbol,
>         row,
>         direction='LONG'
>     )


Adjust symbol to a specified weight (percent) of portfolio.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The current date.


**```price```** :&ensp;<code>float</code>
:   The current price of the security.


**```weight```** :&ensp;<code>float</code>
:   The requested weight for the symbol.


**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.


**```row```** :&ensp;<code>pd.Series</code>
:   A row of data from the timeseries of the portfolio.


**```direction```** :&ensp;<code>pf.Direction</code>, optional
:   The direction of the trade (default is <code>pf.Direction.LONG</code>).

###### Returns

<code>int</code>
:   The number of shares bought or sold.



    
##### Method `adjust_percents` {#id}




>     def adjust_percents(
>         self,
>         date,
>         prices,
>         weights,
>         row,
>         directions=None
>     )


Adjust symbols to a specified weight (percent) of portfolio.

This function assumes all positions are LONG.  Prices and
weights are given for all symbols in the portfolio.  The
ordering of the prices and weights dicts are unimportant.
They are dicts which are indexed by the symbol.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The current date.


**```prices```** :&ensp;<code>dict</code> of <code>floats</code>
:   Dict of key value pair of symbol:price.


**```weights```** :&ensp;<code>dict</code> of <code>floats</code>
:   Dict of key value pair of symbol:weight.


**```row```** :&ensp;<code>pd.Series</code>
:   A row of data from the timeseries of the portfolio.


**```directions```** :&ensp;<code>dict</code> of <code>pf.Direction</code>, optional
:   Dict of key value pair of symbol:direction.  The direction
    of the trades (default is None, which implies that all
    positions are long).

###### Returns

**```w```** :&ensp;<code>dict</code> of <code>floats</code>
:   Dict of key value pair of symbol:weight.



    
##### Method `calendar` {#id}




>     def calendar(
>         self,
>         ts
>     )


Add calendar columns to a timeseries.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of a symbol.

###### Returns

<code>pd.DataFrame</code>
:   The timeseries with calendar columns added.



    
##### Method `correlation_map` {#id}




>     def correlation_map(
>         self,
>         ts,
>         method='log',
>         days=None
>     )


Show correlation map between symbols.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of the portfolio.


**```method```** :&ensp;<code>str</code>, optional `{'price', 'log', 'returns'}`
:   Analysis done based on specified method (default is 'log').


**```days```** :&ensp;<code>int</code>
:   How many days to use for correlation (default is None,
    which implies all days).

###### Returns

**```df```** :&ensp;<code>pd.DataFrame</code>
:   The dataframe contains the correlation data for each symbol
    in the portfolio.



    
##### Method `fetch_timeseries` {#id}




>     def fetch_timeseries(
>         self,
>         symbols,
>         start,
>         end,
>         fields=['open', 'high', 'low', 'close'],
>         dir_name='data',
>         use_cache=True,
>         use_adj=True,
>         use_continuous_calendar=False,
>         force_stock_market_calendar=False,
>         check_fields=['close']
>     )


Fetch time series data for symbols.

###### Parameters

**```symbols```** :&ensp;<code>list</code>
:   The list of symbols to fetch timeseries.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The desired start date for the strategy.


**```end```** :&ensp;<code>datetime.datetime</code>
:   The desired end date for the strategy.


**```fields```** :&ensp;<code>list</code>, optional
:   The list of fields to use for each symbol (default is
    ['open', 'high', 'low', 'close']).  List must include 
    'close' - will be added if not already in list.


**```dir_name```** :&ensp;<code>str</code>, optional
:   The leaf data dir name (default is 'data').


**```use_cache```** :&ensp;<code>bool</code>, optional
:   True to use data cache.  False to retrieve from the
    internet (default is True).


**```use_adj```** :&ensp;<code>bool</code>, optional
:   True to adjust prices for dividends and splits
    (default is False).


**```use_continuous_calendar```** :&ensp;<code>bool</code>, optional
:   True if your timeseries has data for all seven days a week,
    and you want to backtest trading every day, including weekends.
    If this value is True, then <code>force\_stock\_market\_calendar</code>
    is set to False (default is False).


**```force_stock_market_calendar```** :&ensp;<code>bool</code>, optional
:   True forces use of stock market calendar on timeseries.
    Normally, you don't need to do this.  This setting is intended
    to transform a continuous timeseries into a weekday timeseries.
    If this value is True, then <code>use\_continuous\_calendar</code> is set
    to False (default is False).


**```check_fields```** :&ensp;<code>list</code> of <code>str</code>, optional `{'high', 'low', 'open',`
:   'close', 'adj_close'}
    Fields to check for for NaN values.  If a NaN value is found
    for one of these fields, that row is dropped
    (default is ['close']).

###### Returns

<code>pd.DataFrame</code>
:   The timeseries of the symbols.



    
##### Method `finalize_timeseries` {#id}




>     def finalize_timeseries(
>         self,
>         ts,
>         start,
>         dropna=True
>     )


Finalize timeseries.

Drop all rows that have nan column values.  Set timeseries to begin
at start.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of a symbol.


**```start```** :&ensp;<code>datetime.datetime</code>
:   The start date for backtest.


**```dropna```** :&ensp;<code>bool</code>, optional
:   Drop rows that have a NaN value in one of it's columns
    (default is True).

###### Returns

<code>datetime.datetime</code>
:   The start date.


<code>pd.DataFrame</code>
:   The timeseries of a symbol.



    
##### Method `get_logs` {#id}




>     def get_logs(
>         self
>     )


Return raw tradelog, tradelog, and daily balance log.

###### Parameters

**```None```**
:   &nbsp;

###### Returns

**```rlog```** :&ensp;<code>pd.DataFrame</code>
:   The raw trade log.


**```tlog```** :&ensp;<code>pd.DataFrame</code>
:   The trade log.


**```dbal```** :&ensp;<code>pd.DataFrame</code>
:   The daily balance log.



    
##### Method `get_price` {#id}




>     def get_price(
>         self,
>         row,
>         symbol,
>         field='close'
>     )


Return price given row, symbol, and field.

###### Parameters

**```row```** :&ensp;<code>pd.Series</code>
:   The row of data from the timeseries of the portfolio.


**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.


**```field```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   The price field (default is 'close').

###### Returns

**```price```** :&ensp;<code>float</code>
:   The current price.



    
##### Method `get_prices` {#id}




>     def get_prices(
>         self,
>         row,
>         fields=['open', 'high', 'low', 'close']
>     )


Return dict of prices for all symbols given row and fields.

###### Parameters

**```row```** :&ensp;<code>pd.Series</code>
:   A row of data from the timeseries of the portfolio.


**```fields```** :&ensp;<code>list</code>, optional
:   The list of fields to use for each symbol (default is
    ['open', 'high', 'low', 'close']).

###### Returns

**```d```** :&ensp;<code>dict</code> of <code>floats</code>
:   The price indexed by symbol and field.



    
##### Method `init_trade_logs` {#id}




>     def init_trade_logs(
>         self,
>         ts
>     )


Add a trade log for each symbol.

###### Parameters

**```ts```** :&ensp;<code>pd.DataFrame</code>
:   The timeseries of the portfolio.

###### Returns

<code>None</code>
:   &nbsp;



    
##### Method `performance_per_symbol` {#id}




>     def performance_per_symbol(
>         self,
>         weights
>     )


Returns performance per symbol data, also plots performance.

###### Parameters

**```weights```** :&ensp;<code>dict</code> of <code>floats</code>
:   A dictionary of weights with symbol as key.

###### Returns

**```df```** :&ensp;<code>pd.DataFrame</code>
:   The dataframe contains performance for each symbol in the
    portfolio.



    
##### Method `print_holdings` {#id}




>     def print_holdings(
>         self,
>         date,
>         row,
>         percent=False
>     )


Print snapshot of portfolio holding and values.

Includes all symbols regardless of whether a symbol has shares
currently allocated to it.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The current date.


**```row```** :&ensp;<code>pd.Series</code>
:   A row of data from the timeseries of the portfolio.


**```percent```** :&ensp;<code>bool</code>, optional
:   Show each holding as a percent instead of shares.
    (default is False).

###### Returns

<code>None</code>
:   &nbsp;



    
##### Method `record_daily_balance` {#id}




>     def record_daily_balance(
>         self,
>         date,
>         row
>     )


Append to daily balance list.

The portfolio version of this function uses closing values
for the daily high, low, and close.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The current date.


**```row```** :&ensp;<code>pd.Series</code>
:   A row of data from the timeseries of the portfolio.

###### Returns

<code>None</code>
:   &nbsp;



    
##### Method `share_percent` {#id}




>     def share_percent(
>         self,
>         row,
>         symbol
>     )


Return share value of symbol as a percentage of <code>total\_funds</code>.

###### Parameters

**```row```** :&ensp;<code>pd.Series</code>
:   A row of data from the timeseries of the portfolio.


**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.

###### Returns

<code>float</code>
:   The share value as a percent.



    
##### Method `shares` {#id}




>     def shares(
>         self,
>         symbol
>     )


Return number of shares for given symbol in portfolio.

###### Parameters

**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.

###### Returns

`tlog.shares : int`
:   The number of shares for a given symbol.





    
# Module `pinkfish.stock_market_calendar` {#id}

Past and Future dates when the stock market is open from 1928 to 2024.







    
# Module `pinkfish.trade` {#id}

Trading agent.





    
## Classes


    
### Class `DailyBal` {#id}




>     class DailyBal


Log for daily balance.

Initialize instance variables.

#### Attributes

**```_l```** :&ensp;<code>list</code> of <code>tuples</code>
:   The list of daily balance tuples.









    
#### Methods


    
##### Method `append` {#id}




>     def append(
>         self,
>         date,
>         close,
>         high=None,
>         low=None
>     )


Append a new entry to the daily balance log.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The current date.


**```close```** :&ensp;<code>float</code>
:   The balance close value of the day.


**```high```** :&ensp;<code>float</code>, optional
:   The balance high value of the day (default is None,
    which implies that the 'high' is the 'close'.  In other
    words, we are not using intra-day prices).


**```low```** :&ensp;<code>float</code>, optional
:   The balance low value of the day (default is None,
    which implies that the 'low' is the 'close'.  In other
    words, we are not using intra-day prices).

###### Returns

<code>None</code>
:   &nbsp;



    
##### Method `get_log` {#id}




>     def get_log(
>         self,
>         tlog
>     )


Return the daily balance log.

The daily balance log consists of the following columns:
'date', 'high', 'low', 'close', 'shares', 'cash', 'leverage'

###### Parameters

**```tlog```** :&ensp;<code>pd.DataFrame</code>
:   The trade log.

###### Returns

**```dbal```** :&ensp;<code>pd.DataFrame</code>
:   The daily balance log.



    
### Class `Direction` {#id}




>     class Direction


The direction of the trade.  Either LONG or SHORT.




    
#### Class variables


    
##### Variable `LONG` {#id}






    
##### Variable `SHORT` {#id}









    
### Class `Margin` {#id}




>     class Margin


The type of margin.  CASH, STANDARD, or PATTERN_DAY_TRADER.




    
#### Class variables


    
##### Variable `CASH` {#id}






    
##### Variable `PATTERN_DAY_TRADER` {#id}






    
##### Variable `STANDARD` {#id}









    
### Class `TradeLog` {#id}




>     class TradeLog(
>         symbol,
>         reset=True
>     )


The trade log for each symbol.

Initialize instance variables.

#### Parameters

**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.


**```reset```** :&ensp;<code>bool</code>, optional
:   Use when starting new portfolio construction to clear the
    dict of TradeLog instances (default is True).

#### Attributes

**```symbol```** :&ensp;<code>str</code>
:   The symbol for a security.


**```shares```** :&ensp;<code>int</code>
:   Number of shares of the symbol.


**```direction```** :&ensp;<code>pf.Direction</code>
:   The direction of the trade, Long or Short.


**```ave_entry_price```** :&ensp;<code>float</code>
:   The average purchase price per share.


**```cumul_total```** :&ensp;<code>float</code>
:   The cumulative total profits (loss).


**```_l```** :&ensp;<code>list</code> of <code>tuples</code>
:   The list of matching entry/exit trade pairs.  This list
    will become the official trade log.


**```_raw```** :&ensp;<code>list</code> of <code>tuples</code>
:   The list of raw trades, either entry or exit.


**```open_trades```** :&ensp;<code>list</code>
:   The list of open trades, i.e. not closed out.






    
#### Class variables


    
##### Variable `buying_power` {#id}




float : Buying power for Portfolio class.

    
##### Variable `cash` {#id}




int : Current cash, entire portfolio.

    
##### Variable `instance` {#id}




dict of pf.TradeLog : dict (key=symbol) of TradeLog instances used
in Portfolio class.

    
##### Variable `margin` {#id}




float : Margin percent.

    
##### Variable `multiplier` {#id}




int : Applied to profit calculation.  Used only with futures.

    
##### Variable `seq_num` {#id}




int : Sequential number used to order trades in Portfolio class.


    
#### Instance variables


    
##### Variable `num_open_trades` {#id}




Return the number of open orders, i.e. not closed out.



    
#### Methods


    
##### Method `adjust_percent` {#id}




>     def adjust_percent(
>         self,
>         date,
>         price,
>         weight,
>         direction='LONG'
>     )


Adjust position to a target percent of the current portfolio
value.

If the position doesn't already exist, this is equivalent
to entering a new trade. If the position does exist, this is
equivalent to entering or exiting a trade for the difference
between the target percent and the current percent.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The trade date.


**```price```** :&ensp;<code>float</code>
:   The current price of the security.


**```shares```** :&ensp;<code>int</code>
:   The requested target weight.


**```direction```** :&ensp;<code>pf.Direction</code>, optional
:   The direction of the trade (default is Direction.LONG).

###### Returns

<code>int</code>
:   The number of shares bought or sold.



    
##### Method `adjust_shares` {#id}




>     def adjust_shares(
>         self,
>         date,
>         price,
>         shares,
>         direction='LONG'
>     )


Adjust a position to a target number of shares.

If the position doesn't already exist, this is equivalent
to entering a new trade. If the position does exist, this is
equivalent to entering or exiting a trade for the difference
between the target number of shares and the current number
of shares.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The trade date.


**```price```** :&ensp;<code>float</code>
:   The current price of the security.


**```shares```** :&ensp;<code>int</code>
:   The requested number of target shares.


**```direction```** :&ensp;<code>pf.Direction</code>, optional
:   The direction of the trade (default is Direction.LONG).

###### Returns

<code>int</code>
:   The number of shares bought or sold.



    
##### Method `adjust_value` {#id}




>     def adjust_value(
>         self,
>         date,
>         price,
>         value,
>         direction='LONG'
>     )


Adjust a position to a target value.

If the position doesn't already exist, this is equivalent
to entering a new trade. If the position does exist, this is
equivalent to entering or exiting a trade for the difference
between the target value and the current value.

###### Parameters

**```date```** :&ensp;<code>str</code>
:   The trade date.


**```price```** :&ensp;<code>float</code>
:   The current price of the security.


**```shares```** :&ensp;<code>int</code>
:   The requested target value.


**```direction```** :&ensp;<code>pf.Direction</code>, optional
:   The direction of the trade (default is Direction.LONG).

###### Returns

<code>int</code>
:   The number of shares bought or sold.



    
##### Method `buy` {#id}




>     def buy(
>         self,
>         entry_date,
>         entry_price,
>         shares=None
>     )


Enter a trade on the long side.

###### Parameters

**```entry_date```** :&ensp;<code>str</code>
:   The entry date.


**```entry_price```** :&ensp;<code>float</code>
:   The entry price.


**```shares```** :&ensp;<code>int</code>, optional
:   The number of shares to buy (default is None, which implies
    buy the maximum number of shares possible with available
    buying power).

###### Returns

<code>int</code>
:   The number of shares bought.

###### Notes

The `buy' alias can be used to call this function for increasing
or opening a long position.

    
##### Method `buy2cover` {#id}




>     def buy2cover(
>         self,
>         exit_date,
>         exit_price,
>         shares=None
>     )


Exit a trade on the short side, i.e. buy to cover.

###### Parameters

**```exit_date```** :&ensp;<code>str</code>
:   The exit date.


**```exit_price```** :&ensp;<code>float</code>
:   The exit price.


**```shares```** :&ensp;<code>int</code>
:   The number of shares to buy to cover (default in None,
    which implies close out the short shares).

###### Returns

<code>int</code>
:   The number of shares bought.



    
##### Method `calc_buying_power` {#id}




>     def calc_buying_power(
>         self,
>         price
>     )


Calculate buying power.

    
##### Method `calc_shares` {#id}




>     def calc_shares(
>         self,
>         price,
>         cash=None
>     )


Calculate shares using buying power before enter_trade().

###### Parameters

**```price```** :&ensp;<code>float</code>
:   The current price of the security.


**```cash```** :&ensp;<code>float</code>, optional
:   The requested amount of cash used to buy shares (default
    is None, which implies use all available cash).

###### Returns

**```value```** :&ensp;<code>float</code>
:   The number of shares that can be purchased with requested
    cash amount.



    
##### Method `enter_trade` {#id}




>     def enter_trade(
>         self,
>         entry_date,
>         entry_price,
>         shares=None
>     )


Enter a trade on the long side.

###### Parameters

**```entry_date```** :&ensp;<code>str</code>
:   The entry date.


**```entry_price```** :&ensp;<code>float</code>
:   The entry price.


**```shares```** :&ensp;<code>int</code>, optional
:   The number of shares to buy (default is None, which implies
    buy the maximum number of shares possible with available
    buying power).

###### Returns

<code>int</code>
:   The number of shares bought.

###### Notes

The `buy' alias can be used to call this function for increasing
or opening a long position.

    
##### Method `equity` {#id}




>     def equity(
>         self,
>         price
>     )


Return the equity which is the total value minus loan.
Loan is negative cash.

    
##### Method `exit_trade` {#id}




>     def exit_trade(
>         self,
>         exit_date,
>         exit_price,
>         shares=None
>     )


Exit a trade on the long side.

###### Parameters

**```exit_date```** :&ensp;<code>str</code>
:   The exit date.


**```exit_price```** :&ensp;<code>float</code>
:   The exit price.


**```shares```** :&ensp;<code>int</code>, optional
:   The number of shares to sell (default is None, which implies
    sell all the shares).

###### Returns

<code>int</code>
:   The number of shares sold.

###### Notes

The `sell' alias can be used to call this function for reducing
or closing out a long position.

    
##### Method `get_log` {#id}




>     def get_log(
>         self,
>         merge_trades=False
>     )


Return the trade log.

The trade log consists of the following columns:
'entry_date', 'entry_price', 'exit_date', 'exit_price',
'pl_points', 'pl_cash', 'qty', 'cumul_total',
'direction', 'symbol'.

###### Parameters

**```merge_trade```** :&ensp;<code>bool</code>, optional
:   True to merge trades that occur on the same date
    (default is False).

###### Returns

**```tlog```** :&ensp;<code>pd.DataFrame</code>
:   The trade log.



    
##### Method `get_log_raw` {#id}




>     def get_log_raw(
>         self
>     )


Return the raw trade log.

The trade log consists of the following columns:
'date', 'seq_num', 'price', 'shares', 'entry_exit',
'direction', 'symbol'.

###### Returns

**```rlog```** :&ensp;<code>pd.DataFrame</code>
:   The raw trade log.



    
##### Method `get_price` {#id}




>     def get_price(
>         self,
>         row,
>         field='close'
>     )


Return price given row and field.

###### Parameters

**```row```** :&ensp;<code>pd.Series</code>
:   The timeseries of the portfolio.


**```field```** :&ensp;<code>str</code>, optional `{'close', 'open', 'high', 'low'}`
:   The price field (default is 'close').

###### Returns

<code>float</code>
:   The current price.



    
##### Method `get_prices` {#id}




>     def get_prices(
>         self,
>         row,
>         fields=['open', 'high', 'low', 'close']
>     )


Return dict of prices for all symbols given row and fields.

###### Parameters

**```row```** :&ensp;<code>pd.Series</code>
:   The timeseries of the portfolio.


**```fields```** :&ensp;<code>list</code>, optional
:   The list of fields to use (default is
    ['open', 'high', 'low', 'close']).

###### Returns

**```d```** :&ensp;<code>dict</code> of <code>floats</code>
:   The price indexed by fields.



    
##### Method `leverage` {#id}




>     def leverage(
>         self,
>         price
>     )


Return the leverage factor of the position given current price.

    
##### Method `sell` {#id}




>     def sell(
>         self,
>         exit_date,
>         exit_price,
>         shares=None
>     )


Exit a trade on the long side.

###### Parameters

**```exit_date```** :&ensp;<code>str</code>
:   The exit date.


**```exit_price```** :&ensp;<code>float</code>
:   The exit price.


**```shares```** :&ensp;<code>int</code>, optional
:   The number of shares to sell (default is None, which implies
    sell all the shares).

###### Returns

<code>int</code>
:   The number of shares sold.

###### Notes

The `sell' alias can be used to call this function for reducing
or closing out a long position.

    
##### Method `sell_short` {#id}




>     def sell_short(
>         self,
>         entry_date,
>         entry_price,
>         shares=None
>     )


Enter a trade on the short side.

###### Parameters

**```entry_date```** :&ensp;<code>str</code>
:   The entry date.


**```entry_price```** :&ensp;<code>float</code>
:   The entry price.


**```shares```** :&ensp;<code>int</code>
:   The number of shares to sell short (default in None, which
    implies to sell short the maximum number of shares
    possible).

###### Returns

<code>int</code>
:   The number of shares sold short.



    
##### Method `share_percent` {#id}




>     def share_percent(
>         self,
>         price
>     )


Return the share value as a percentage of total funds.

    
##### Method `share_value` {#id}




>     def share_value(
>         self,
>         price
>     )


Return the total value of shares of the security.

###### Parameters

**```price```** :&ensp;<code>float</code>
:   The current price of the security.

###### Returns

**```value```** :&ensp;<code>float</code>
:   The share value.



    
##### Method `total_funds` {#id}




>     def total_funds(
>         self,
>         price
>     )


Return the total account funds for trading given current price.

    
##### Method `total_value` {#id}




>     def total_value(
>         self,
>         price
>     )


Return the total value which is the total share value plus cash.

###### Parameters

**```price```** :&ensp;<code>float</code>
:   The current price of the security.

###### Returns

**```value```** :&ensp;<code>float</code>
:   The total value.



    
### Class `TradeState` {#id}




>     class TradeState


The trade state of OPEN, HOLD, or CLOSE.

In the Daily Balance log, trade state is given by these
characters: OPEN='O', HOLD='-', and CLOSE='X'




    
#### Class variables


    
##### Variable `CLOSE` {#id}






    
##### Variable `HOLD` {#id}






    
##### Variable `OPEN` {#id}











    
# Module `pinkfish.utility` {#id}

Utility functions.



    
## Variables


    
### Variable `ROOT` {#id}




str: pinkfish project root dir.


    
## Functions


    
### Function `find_nan_rows` {#id}




>     def find_nan_rows(
>         ts
>     )


Return a dataframe with the rows that contain NaN values.

This function can help you track down problems with a timeseries.
You may need to call `pd.set_option("display.max_columns", None)`
at the top of your notebook to display all columns.

###### Examples

```python-repl
>>> pd.set_option("display.max_columns", None)
>>> df = pf.find_nan_rows(ts)
>>> df
```


    
### Function `import_strategy` {#id}




>     def import_strategy(
>         strategy_name,
>         top_level_dir='examples',
>         module_name='strategy'
>     )


Import a strategy from a python <code>.py</code> file.

###### Parameters

**```strategy_name```** :&ensp;<code>str</code>
:   The leaf dir name that contains the strategy to import.


**```top_level_dir```** :&ensp;<code>str</code>, optional
:   The top level dir name for the strategies
    (default is 'examples').


**```module_name```** :&ensp;<code>str</code>, optional
:   The name of the python module (default is 'strategy').

###### Returns

<code>module</code>
:   The imported module.

###### Examples

```python-repl
>>> strategy = import_strategy(strategy_name='190.momentum-dmsr-portfolio')
```


    
### Function `is_last_row` {#id}




>     def is_last_row(
>         ts,
>         index
>     )


Return True for last row, False otherwise.

    
### Function `no_empty_container` {#id}




>     def no_empty_container(
>         container_name,
>         default_ret_value
>     )


Check if container is empty.  If so, return <code>default\_ret\_value</code>.

###### Parameters

**```container_name```** :&ensp;<code>str</code>
:   The name of the container parameter to check.


**```default_ret_value```** :&ensp;<code>int</code>
:   The return value the wrapped function if the container is empty.
    (default is 'examples').


**```module_name```** :&ensp;<code>str</code>, optional
:   The name of the python module (default is 'strategy').

###### Returns

<code>default\_ret\_value</code> or <code>func</code> return value : type of return value
    If the container is empty, <code>default\_ret\_value</code> is returned,
    otherwise the return value of <code>func</code>.

###### Examples

```python-repl
>>> @no_empty_container('my_list', 0)
>>> def my_func(my_list):
>>>     return 5
>>> my_func([])
0
```


    
### Function `print_full` {#id}




>     def print_full(
>         x
>     )


Print every row of list-like object.

    
### Function `read_config` {#id}




>     def read_config()


Read pinkfish configuration.

    
### Function `set_dict_values` {#id}




>     def set_dict_values(
>         d,
>         value
>     )


Return dict with same keys as <code>d</code> and all values equal to `value'.

    
### Function `sort_dict` {#id}




>     def sort_dict(
>         d,
>         reverse=False
>     )


Return sorted dict; optionally reverse sort.



-----
Generated by *pdoc* 0.10.0 (<https://pdoc3.github.io>).
